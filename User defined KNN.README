# user defind KNN algorithn:

from sklearn import tree
from scipy.spatial import distance
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

def euc(a,b):
    return distance.euclidean(a,b)

class MarvellousKNN():

    def fit(self,TrainingData,TrainingTarget):
        self.TrainingData = TrainingData
        self.TrainingTarget =TrainingTarget


    def predict(self,TestData):
        predictions = []
        for row in TestData:
            lebal = self.Closest(row)
            predictions.append(lebal)
        return predictions

    def Closest(self,row):
        bestdistance = euc(row,self.TrainingData[0])
        bestindex = 0
        for i in range (1,len(self.TrainingData)):
            dist = euc(row,self.TrainingData[i])
            if dist < bestdistance:
                bestdistance = dist
                bestindexv = i
            return  self.TrainingTarget[bestindex]


def MarvellousKNNClassifier():
    iris = load_iris()

    data = iris.data
    target  = iris.target

    print("-----------------------------------------------------------")
    print("Actual Data Set:")
    print("___________________________________________________________")

    for i in range (len(iris.target)):
        print("ID %d ,Label %s, Feature:%s"%(i,iris.data[i],iris.target[i]))
        print("Size of Actual data set %d"%(i+1))

    data_train,data_test,target_train,target_test = train_test_split(data,target,test_size =0.5)

    print("-----------------------------------------------------------")
    print("Training Data set:")
    print("___________________________________________________________")

    for i in range(len(data_train)):
        print("ID %d ,Label %s, Feature:%s" % (i, data_train[i], target_train[i]))
        print("Size training data set %d" % (i + 1))

    print("-----------------------------------------------------------")
    print("Testing Data set:")
    print("___________________________________________________________")

    for i in range(len(data_train)):
        print("ID %d ,Label %s, Feature:%s" % (i, data_test[i], target_test[i]))
        print("Size Testing data set %d" % (i + 1))


    classifier = MarvellousKNN()

    classifier.fit(data_train,target_train)

    Prediction = classifier.predict(data_test)

    Accuracy = accuracy_score(target_test,Prediction)

    return Accuracy



def main():
    Accuracy = MarvellousKNNClassifier()
    print("Accuracy of classification with KNN classifier is ", Accuracy*100,"%")


if __name__=="__main__":
    main()
